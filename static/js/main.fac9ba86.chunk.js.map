{"version":3,"sources":["logo.svg","Numpad.tsx","Settings.tsx","common.tsx","HistoricProblems.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Numpad","props","digits","map","digit","className","onClick","key","Settings","config","setConfig","useState","toggle","setToggle","onConfigChange","target","id","value","parseInt","htmlFor","disabled","type","onChange","printProblem","a","b","action","HistoricProblems","problems","length","problem","App","setA","setB","answerHint","setAnswerHint","aRange","aOffset","bRange","bOffset","previousProblems","setPreviousProblems","generateProblem","Math","floor","random","document","getElementById","checkProblem","resultField","res","saveProblem","useEffect","placeholder","appendDigit","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fac9ba86.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport \"./Numpad.css\";\n\ninterface Props {\n  onClick: (i: number) => void;\n}\n\nfunction Numpad(props: Props) {\n  const digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0].map((digit) => {\n    return (\n      <div className=\"digit\" onClick={() => props.onClick(digit)} key={digit}>\n        {digit}\n      </div>\n    );\n  });\n\n  return <div className=\"numpad\">{digits}</div>;\n}\nexport default Numpad;\n","import React, { Dispatch, SetStateAction, useState } from \"react\";\nimport { IConfig } from \"./common\";\nimport \"./Settings.css\";\n\ninterface Props {\n  config: IConfig;\n  setConfig: Dispatch<SetStateAction<IConfig>>;\n}\n\nfunction Settings({ config, setConfig }: Props) {\n  let [toggle, setToggle] = useState<boolean>(false);\n\n  const onConfigChange = ({ target: { id, value } }: React.ChangeEvent<HTMLInputElement>) => {\n    setConfig({ ...config, [id]: parseInt(value) });\n\n    // debugger\n    // if (id === \"action\") {\n    //   setConfig({ ...config, [id]: value });\n    // } else {\n    //   setConfig({ ...config, [id]: parseInt(value) });\n    // }\n  };\n\n  return (\n    <div>\n      <div onClick={() => setToggle(!toggle)}>{toggle ? \"סגור הגדרות ^\" : \"פתח הגדרות V\"}</div>\n      {toggle && (\n        <div className=\"settings\">\n          <div>\n            <label htmlFor=\"action\">Select Action</label>\n            <select id=\"action\" disabled>\n              <option value=\"x\">כפל</option>\n              <option value=\"+\">חיבור</option>\n              <option value=\"-\">חיסור</option>\n            </select>\n          </div>\n\n          <div className=\"input-group\">\n            <div>\n              <label htmlFor=\"aOffset\">aOffset</label>\n              <input\n                id=\"aOffset\"\n                type=\"number\"\n                value={config[\"aOffset\"]}\n                onChange={onConfigChange}\n              />\n            </div>\n            <div>\n              <label htmlFor=\"aRange\">aRange</label>\n              <input id=\"aRange\" type=\"number\" value={config[\"aRange\"]} onChange={onConfigChange} />\n            </div>\n            <div>\n              a = {config[\"aOffset\"]} - {config[\"aOffset\"] + config[\"aRange\"] - 1}\n            </div>\n          </div>\n          <div className=\"input-group\">\n            <div>\n              <label htmlFor=\"bOffset\">bOffset</label>\n              <input\n                id=\"bOffset\"\n                type=\"number\"\n                value={config[\"bOffset\"]}\n                onChange={onConfigChange}\n              />\n            </div>\n            <div>\n              <label htmlFor=\"bRange\">bRange</label>\n              <input id=\"bRange\" type=\"number\" value={config[\"bRange\"]} onChange={onConfigChange} />\n            </div>\n            <div>\n              b = {config[\"bOffset\"]} - {config[\"bOffset\"] + config[\"bRange\"] - 1}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Settings;\n","import React from \"react\";\n\nexport interface IProblem {\n  a: number;\n  b: number;\n  action: string;\n}\n\nexport interface IConfig {\n  aRange: number;\n  aOffset: number;\n  bRange: number;\n  bOffset: number;\n}\n\n// TODO - move this to a component\nexport const printProblem = ({ a, b, action }: IProblem) => {\n  return <div key={`${a}${action}${b}`}>{` ${a} ${action} ${b} = ? `}</div>;\n};\n","import React, { useState } from \"react\";\nimport { IProblem, printProblem } from \"./common\";\nimport \"./HistoricProblems.css\";\n\ninterface Props {\n  problems: Array<IProblem>;\n}\n\nfunction HistoricProblems(props: Props) {\n  let [toggle, setToggle] = useState(false);\n  const problems = props.problems;\n  return (\n    <div onClick={() => setToggle(!toggle)}>\n      <p>{problems.length} תרגילים קודמים</p>\n\n      {toggle && (\n        <div className=\"historicProblems\">{problems.map((problem) => printProblem(problem))}</div>\n      )}\n    </div>\n  );\n}\n\nexport default HistoricProblems;\n","import React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport Numpad from \"./Numpad\";\nimport Settings from \"./Settings\";\nimport HistoricProblems from \"./HistoricProblems\";\nimport { IConfig, IProblem, printProblem } from \"./common\";\n\nimport \"./App.css\";\n\nfunction App() {\n  let [a, setA] = useState<number>(0);\n  let [b, setB] = useState<number>(0);\n  let [action, setAction] = useState<string>(\"x\");\n  let [answerHint, setAnswerHint] = useState<string>(\"\");\n  let [config, setConfig] = useState<IConfig>({\n    aRange: 50,\n    aOffset: 1,\n    bRange: 5,\n    bOffset: 2,\n  });\n\n  let [previousProblems, setPreviousProblems] = useState<Array<IProblem>>([]);\n\n  // const action = {\n  //   sum: {\n  //     display: \"+\",\n  //     action: (a: number, b: number) => a + b,\n  //     config: { aOffset: 250, aRange: 250, bOffset: 10, bRange: 30 },\n  //   },\n  //   multiply: {\n  //     display: \"x\",\n  //     action: (a: number, b: number) => a * b,\n  //     config: { aOffset: 1, aRange: 50, bOffset: 2, bRange: 5},\n  //   },\n  // };\n\n  const generateProblem = () => {\n    setA(Math.floor(Math.random() * config[\"aRange\"] + config[\"aOffset\"]));\n    setB(Math.floor(Math.random() * config[\"bRange\"] + config[\"bOffset\"]));\n\n    const resultField = document.getElementById(\"result\") as HTMLInputElement;\n    resultField.value = \"?\";\n  };\n\n  // For the visual numpad\n  const appendDigit = (digit: number) => {\n    const resultField = document.getElementById(\"result\") as HTMLInputElement;\n    resultField.value = resultField.value + digit;\n  };\n\n  const saveProblem = (a: number, b: number, action: string) => {\n    const previousProblem: IProblem = { a, b, action };\n    setPreviousProblems([previousProblem, ...previousProblems]);\n  };\n\n  const checkProblem = () => {\n    const resultField = document.getElementById(\"result\") as HTMLInputElement;\n    const res = parseInt(resultField.value);\n    if (res === a * b) {\n      setAnswerHint(\"כל הכבוד\");\n      saveProblem(a, b, action);\n      generateProblem();\n    } else if (res <= a * b) {\n      setAnswerHint(\"נמוך מידי\");\n    } else {\n      setAnswerHint(\"גבוה מידי\");\n    }\n    resultField.value = \"?\";\n  };\n\n  // Generate first problem.\n  useEffect(() => {\n    generateProblem();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>חשבון פשוט</p>\n\n        {printProblem({ a, b, action })}\n\n        {answerHint}\n        <div className=\"MathProblem\">\n          <input placeholder=\"?\" type=\"number\" id=\"result\" />\n          <button onClick={() => checkProblem()}>בדוק</button>\n        </div>\n        <Numpad\n          onClick={(digit: number) => {\n            appendDigit(digit);\n          }}\n        />\n        <HistoricProblems problems={previousProblems} />\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Settings config={config} setConfig={setConfig} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}