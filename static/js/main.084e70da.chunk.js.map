{"version":3,"sources":["logo.svg","Numpad.tsx","Settings.tsx","Problem.tsx","HistoricProblems.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Numpad","props","characters","map","char","className","onClick","key","Settings","config","setConfig","useState","toggle","setToggle","onNumberChange","name","_","values","offset","range","onConfigChange","id","aOffset","aRange","bOffset","bRange","console","log","htmlFor","disabled","value","Slider","onChange","valueLabelDisplay","aria-labelledby","step","min","max","Problem","a","b","action","size","classes","problemKey","HistoricProblems","problems","length","IconButton","clsx","expandOpen","ExpandMore","color","Collapse","in","problem","App","setA","setB","answerHint","setAnswerHint","previousProblems","setPreviousProblems","generateProblem","Math","floor","random","document","getElementById","checkProblem","resultField","res","parseInt","saveProblem","useEffect","placeholder","type","substr","numpadClick","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.084e70da.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport { NumpadChar } from \"./common\";\nimport \"./Numpad.css\";\n\ninterface Props {\n  onClick: (char: NumpadChar) => void;\n}\n\nfunction Numpad(props: Props) {\n  const characters = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"<\"].map((char) => {\n    return (\n      <div className=\"char\" onClick={() => props.onClick(char as NumpadChar)} key={char}>\n        {char}\n      </div>\n    );\n  });\n\n  return <div className=\"numpad\">{characters}</div>;\n}\nexport default Numpad;\n","import React, { Dispatch, SetStateAction, useState } from \"react\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { IConfig, ISettingNumberChange } from \"./common\";\n\nimport \"./Settings.css\";\n\ninterface Props {\n  config: IConfig;\n  setConfig: Dispatch<SetStateAction<IConfig>>;\n}\n\nfunction Settings({ config, setConfig }: Props) {\n  let [toggle, setToggle] = useState<boolean>(false);\n\n  const onNumberChange = (name: string) => (_: any, values: Array<number> | number) => {\n    const offset = (values as Array<number>)[0];\n    let range = (values as Array<number>)[1];\n\n    range = range - offset + 1;\n    onConfigChange(name, { offset, range });\n  };\n\n  const onConfigChange = (id: string, { offset, range }: ISettingNumberChange) => {\n    switch (id) {\n      case \"aValues\":\n        setConfig({ ...config, aOffset: offset, aRange: range });\n        break;\n      case \"bValues\":\n        setConfig({ ...config, bOffset: offset, bRange: range });\n        break;\n      default:\n        console.log(\"error in switch case\");\n    }\n    // if (id === \"action\") {\n    //   setConfig({ ...config, [id]: value });\n    // } else {\n    //   setConfig({ ...config, [id]: parseInt(value) });\n    // }\n  };\n\n  return (\n    <div>\n      <div onClick={() => setToggle(!toggle)}>{toggle ? \"סגור הגדרות ^\" : \"פתח הגדרות V\"}</div>\n      {toggle && (\n        <div className=\"settings\">\n          <div>\n            <label htmlFor=\"action\">Select Action</label>\n            <select id=\"action\" disabled>\n              <option value=\"x\">כפל</option>\n              <option value=\"+\">חיבור</option>\n              <option value=\"-\">חיסור</option>\n            </select>\n          </div>\n\n          <div className=\"input-group\">\n            <Slider\n              value={[config[\"aOffset\"], config[\"aOffset\"] + config[\"aRange\"] - 1]}\n              onChange={onNumberChange(\"aValues\")}\n              valueLabelDisplay=\"on\"\n              aria-labelledby=\"range-slider\"\n              step={5}\n              min={0}\n              max={200}\n            />\n            a = {config[\"aOffset\"]} - {config[\"aOffset\"] + config[\"aRange\"] - 1}\n          </div>\n          <div className=\"input-group\">\n            <Slider\n              value={[config[\"bOffset\"], config[\"bOffset\"] + config[\"bRange\"] - 1]}\n              onChange={onNumberChange(\"bValues\")}\n              valueLabelDisplay=\"on\"\n              aria-labelledby=\"range-slider\"\n              min={0}\n              max={25}\n            />\n            b = {config[\"bOffset\"]} - {config[\"bOffset\"] + config[\"bRange\"] - 1}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Settings;\n","import React from \"react\";\nimport { IProblem } from \"./common\";\n\nimport \"./Problem.css\";\n\ntype IPrintProblem = IProblem & {\n  size?: string;\n};\n\nexport function Problem({ a, b, action, size }: IPrintProblem) {\n  const classes = size === \"small\" ? size : \"\";\n  return <div className={classes}>{` ${a} ${action} ${b} = ? `}</div>;\n}\n","import React, { useState } from \"react\";\nimport clsx from \"clsx\";\nimport { IProblem } from \"./common\";\nimport { Problem } from \"./Problem\";\nimport { Collapse, IconButton } from \"@material-ui/core\";\nimport { ExpandMore as ExpandMoreIcon } from \"@material-ui/icons\";\nimport \"./HistoricProblems.css\";\n\ninterface Props {\n  problems: Array<IProblem>;\n}\n\nfunction problemKey({ a, b, action }: IProblem) {\n  return `${a}${action}${b}`;\n}\n\nfunction HistoricProblems(props: Props) {\n  let [toggle, setToggle] = useState(false);\n  const problems = props.problems;\n\n  return (\n    <div>\n      <div className=\"historic-title\">\n        <p>{problems.length} :תרגילים קודמים</p>\n        <IconButton\n          onClick={() => setToggle(!toggle)}\n          className={clsx(\"expand\", {\n            expandOpen: toggle,\n          })}\n        >\n          <ExpandMoreIcon color=\"primary\" />\n        </IconButton>\n      </div>\n      <Collapse in={toggle}>\n        {problems.map((problem) => (\n          <Problem key={problemKey(problem)} {...problem} size=\"small\" />\n        ))}\n      </Collapse>\n    </div>\n  );\n}\n\nexport default HistoricProblems;\n","import React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport Numpad from \"./Numpad\";\nimport Settings from \"./Settings\";\nimport HistoricProblems from \"./HistoricProblems\";\nimport { IConfig, IProblem, NumpadChar } from \"./common\";\n\nimport \"./App.css\";\nimport { Problem } from \"./Problem\";\n\nfunction App() {\n  let [a, setA] = useState<number>(0);\n  let [b, setB] = useState<number>(0);\n  let [action, setAction] = useState<string>(\"x\");\n  let [answerHint, setAnswerHint] = useState<string>(\"\");\n  let [config, setConfig] = useState<IConfig>({\n    aRange: 50,\n    aOffset: 1,\n    bRange: 5,\n    bOffset: 2,\n  });\n\n  let [previousProblems, setPreviousProblems] = useState<Array<IProblem>>([]);\n\n  // const action = {\n  //   sum: {\n  //     display: \"+\",\n  //     action: (a: number, b: number) => a + b,\n  //     config: { aOffset: 250, aRange: 250, bOffset: 10, bRange: 30 },\n  //   },\n  //   multiply: {\n  //     display: \"x\",\n  //     action: (a: number, b: number) => a * b,\n  //     config: { aOffset: 1, aRange: 50, bOffset: 2, bRange: 5},\n  //   },\n  // };\n\n  const generateProblem = () => {\n    setA(Math.floor(Math.random() * config[\"aRange\"] + config[\"aOffset\"]));\n    setB(Math.floor(Math.random() * config[\"bRange\"] + config[\"bOffset\"]));\n\n    const resultField = document.getElementById(\"result\") as HTMLInputElement;\n    resultField.value = \"?\";\n  };\n\n  // For the visual numpad\n  const numpadClick = (char: NumpadChar) => {\n    const resultField = document.getElementById(\"result\") as HTMLInputElement;\n    if (char === \"<\") {\n      resultField.value = resultField.value.substr(0, resultField.value.length - 1);\n    } else {\n      resultField.value = resultField.value + char;\n    }\n  };\n\n  const saveProblem = (a: number, b: number, action: string) => {\n    const previousProblem: IProblem = { a, b, action };\n    setPreviousProblems([previousProblem, ...previousProblems]);\n  };\n\n  const checkProblem = () => {\n    const resultField = document.getElementById(\"result\") as HTMLInputElement;\n    const res = parseInt(resultField.value);\n    if (res === a * b) {\n      setAnswerHint(\"כל הכבוד\");\n      saveProblem(a, b, action);\n      generateProblem();\n    } else if (res <= a * b) {\n      setAnswerHint(\"נמוך מידי\");\n    } else {\n      setAnswerHint(\"גבוה מידי\");\n    }\n    resultField.value = \"?\";\n  };\n\n  // Generate first problem.\n  useEffect(() => {\n    generateProblem();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>חשבון פשוט</p>\n\n        <Problem a={a} b={b} action={action} />\n\n        {answerHint}\n        <div className=\"MathProblem\">\n          <input placeholder=\"?\" type=\"number\" id=\"result\" />\n          <button onClick={() => checkProblem()}>בדוק</button>\n        </div>\n        <Numpad\n          onClick={(char: NumpadChar) => {\n            numpadClick(char);\n          }}\n        />\n        <HistoricProblems problems={previousProblems} />\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Settings config={config} setConfig={setConfig} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}