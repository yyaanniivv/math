{"version":3,"sources":["Problem.tsx","App.tsx","logo.svg","Numpad.tsx","Settings.tsx","HistoricProblems.tsx","serviceWorker.ts","index.tsx"],"names":["Problem","a","b","action","classes","previous","className","App","useState","setA","setB","setAction","answerHint","setAnswerHint","aRange","aOffset","bRange","bOffset","config","setConfig","previousProblems","setPreviousProblems","generateProblem","Math","floor","random","document","getElementById","value","numpadClick","char","resultField","substr","length","checkProblem","saveProblem","res","parseInt","expectedResult","eval","useEffect","placeholder","type","id","onClick","problems","src","logo","alt","module","exports","Numpad","props","characters","map","key","Settings","toggle","setToggle","onNumberChange","name","_","values","offset","range","console","log","in","htmlFor","onChange","e","onActionChange","target","hidden","valueLabelDisplay","aria-labelledby","step","min","max","clsx","expandOpen","color","problemKey","HistoricProblems","problem","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e9b979f6.chunk.js","sourcesContent":["import React from \"react\";\nimport { IProblem } from \"./common\";\n\nimport \"./Problem.css\";\n\ntype IPrintProblem = IProblem & {\n  previous?: boolean;\n};\n\nexport function Problem({ a, b, action, previous }: IPrintProblem) {\n  const classes = previous ? \"previous\" : \"\";\n  return <div className={classes}>{` ${a} ${action} ${b} = ? `}</div>;\n}\n","import React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport Numpad from \"./Numpad\";\nimport Settings from \"./Settings\";\nimport HistoricProblems from \"./HistoricProblems\";\nimport { Action, IConfig, IProblem, NumpadChar } from \"./common\";\n\nimport \"./App.css\";\nimport { Problem } from \"./Problem\";\n\nfunction App() {\n  let [a, setA] = useState<number>(0);\n  let [b, setB] = useState<number>(0);\n  let [action, setAction] = useState<Action>(\"+\");\n  let [answerHint, setAnswerHint] = useState<string>(\"\");\n  let [config, setConfig] = useState<IConfig>({\n    aRange: 50,\n    aOffset: 1,\n    bRange: 9,\n    bOffset: 2,\n  });\n\n  let [previousProblems, setPreviousProblems] = useState<Array<IProblem>>([]);\n\n  // Clean impl without eval\n  // const action = {\n  //   sum: {\n  //     display: \"+\",\n  //     action: (a: number, b: number) => a + b,\n  //     config: { aOffset: 250, aRange: 10, bOffset: 1, bRange: 30 },\n  //   },\n  //   multiply: {\n  //     display: \"x\",\n  //     action: (a: number, b: number) => a * b,\n  //     config: { aOffset: 1, aRange: 50, bOffset: 2, bRange: 5},\n  //   },\n  // };\n\n  const generateProblem = () => {\n    setA(Math.floor(Math.random() * config[\"aRange\"] + config[\"aOffset\"]));\n    setB(Math.floor(Math.random() * config[\"bRange\"] + config[\"bOffset\"]));\n\n    const resultField = document.getElementById(\"result\") as HTMLInputElement;\n    resultField.value = \"?\";\n  };\n\n  // For the visual numpad\n  const numpadClick = (char: NumpadChar) => {\n    const resultField = document.getElementById(\"result\") as HTMLInputElement;\n    if (char === \"⌫\") {\n      resultField.value = resultField.value.substr(0, resultField.value.length - 1);\n    } else if (char === \"✅\") {\n      checkProblem();\n    } else {\n      resultField.value = resultField.value + char;\n    }\n  };\n\n  const saveProblem = (a: number, b: number, action: Action) => {\n    const previousProblem: IProblem = { a, b, action };\n    setPreviousProblems([previousProblem, ...previousProblems]);\n  };\n\n  const checkProblem = () => {\n    const resultField = document.getElementById(\"result\") as HTMLInputElement;\n    const res = parseInt(resultField.value);\n    const expectedResult = eval(`${a} ${action} ${b}`) // Eval is evil. \n    if (res === expectedResult) {\n      setAnswerHint(\"כל הכבוד\");\n      saveProblem(a, b, action);\n      generateProblem();\n    } else if (res <= expectedResult) {\n      setAnswerHint(\"נמוך מידי\");\n    } else {\n      setAnswerHint(\"גבוה מידי\");\n    }\n    resultField.value = \"?\";\n  };\n\n  // Generate first problem.\n  useEffect(() => {\n    generateProblem();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>חשבון פשוט</p>\n\n        <Problem a={a} b={b} action={action} />\n\n        {answerHint}\n        <div className=\"MathProblem\">\n          <input placeholder=\"?\" type=\"number\" id=\"result\" />\n        </div>\n        <Numpad\n          onClick={(char: NumpadChar) => {\n            numpadClick(char);\n          }}\n        />\n        <HistoricProblems problems={previousProblems} />\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Settings action={action} config={config} setConfig={setConfig} setAction={setAction} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport { NumpadChar } from \"./common\";\nimport \"./Numpad.css\";\n\ninterface Props {\n  onClick: (char: NumpadChar) => void;\n}\n\nfunction Numpad(props: Props) {\n  const characters = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"⌫\", \"0\", \"✅\"].map((char) => {\n    return (\n      <div className=\"char\" onClick={() => props.onClick(char as NumpadChar)} key={char}>\n        {char}\n      </div>\n    );\n  });\n\n  return <div className=\"numpad\">{characters}</div>;\n}\nexport default Numpad;\n","import React, { Dispatch, SetStateAction, useState } from \"react\";\nimport { Collapse, IconButton } from \"@material-ui/core\";\nimport { ExpandMore as ExpandMoreIcon } from \"@material-ui/icons\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { Action, IConfig } from \"./common\";\n\nimport \"./Settings.css\";\nimport clsx from \"clsx\";\n\ninterface Props {\n  action: Action;\n  config: IConfig;\n  setConfig: Dispatch<SetStateAction<IConfig>>;\n  setAction: Dispatch<SetStateAction<Action>>;\n}\n\nfunction Settings({ action, config, setConfig, setAction }: Props) {\n  let [toggle, setToggle] = useState<boolean>(false);\n\n  const onActionChange = (action: Action) => {\n    setAction(action);\n  };\n\n  const onNumberChange = (name: string) => (_: any, values: Array<number> | number) => {\n    const offset = (values as Array<number>)[0];\n    let range = (values as Array<number>)[1];\n    range = range - offset + 1;\n\n    switch (name) {\n      case \"aValues\":\n        setConfig({ ...config, aOffset: offset, aRange: range });\n        break;\n      case \"bValues\":\n        setConfig({ ...config, bOffset: offset, bRange: range });\n        break;\n      default:\n        console.log(\"error in switch case\");\n    }\n  };\n\n  return (\n    <div className=\"settings\">\n      <Collapse in={toggle}>\n        <div>\n          <div>\n            <label htmlFor=\"action\">Select Action</label>\n            <select id=\"action\" value={action} onChange={(e) => onActionChange(e.target.value as Action)}>\n              <option value=\"+\">חיבור</option>\n              <option value=\"-\">חיסור</option>\n              <option value=\"x\">כפל</option>\n              <option value=\":\" hidden>חילוק</option>\n            </select>\n          </div>\n\n          <div className=\"input-group\">\n            <Slider\n              value={[config[\"aOffset\"], config[\"aOffset\"] + config[\"aRange\"] - 1]}\n              onChange={onNumberChange(\"aValues\")}\n              valueLabelDisplay=\"on\"\n              aria-labelledby=\"range-slider\"\n              step={5}\n              min={0}\n              max={200}\n            />\n            a = {config[\"aOffset\"]} - {config[\"aOffset\"] + config[\"aRange\"] - 1}\n          </div>\n          <div className=\"input-group\">\n            <Slider\n              value={[config[\"bOffset\"], config[\"bOffset\"] + config[\"bRange\"] - 1]}\n              onChange={onNumberChange(\"bValues\")}\n              valueLabelDisplay=\"on\"\n              aria-labelledby=\"range-slider\"\n              min={0}\n              max={25}\n            />\n            b = {config[\"bOffset\"]} - {config[\"bOffset\"] + config[\"bRange\"] - 1}\n          </div>\n        </div>\n      </Collapse>\n      <div className=\"settings-title\">\n        <IconButton\n          onClick={() => setToggle(!toggle)}\n          className={clsx(\"expand\", {\n            expandOpen: toggle,\n          })}\n        >\n          <ExpandMoreIcon color=\"primary\" />\n        </IconButton>\n        <p>הגדרות</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Settings;\n","import React, { useState } from \"react\";\nimport clsx from \"clsx\";\nimport { Collapse, IconButton } from \"@material-ui/core\";\nimport { ExpandMore as ExpandMoreIcon } from \"@material-ui/icons\";\nimport { IProblem } from \"./common\";\nimport { Problem } from \"./Problem\";\nimport \"./HistoricProblems.css\";\n\ninterface Props {\n  problems: Array<IProblem>;\n}\n\nfunction problemKey({ a, b, action }: IProblem) {\n  return `${a}${action}${b}`;\n}\n\nfunction HistoricProblems(props: Props) {\n  let [toggle, setToggle] = useState(false);\n  const problems = props.problems;\n\n  return (\n    <div>\n      <div className=\"historic-title\">\n        <p>{problems.length} :תרגילים קודמים</p>\n        <IconButton\n          onClick={() => setToggle(!toggle)}\n          className={clsx(\"expand\", {\n            expandOpen: toggle,\n          })}\n        >\n          <ExpandMoreIcon color=\"primary\" />\n        </IconButton>\n      </div>\n      <Collapse in={toggle}>\n        {problems.map((problem) => (\n          <Problem key={problemKey(problem)} {...problem} previous />\n        ))}\n      </Collapse>\n    </div>\n  );\n}\n\nexport default HistoricProblems;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}